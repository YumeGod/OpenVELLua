--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_set_clan_tag, client_draw_indicator, client_log, client_draw_rectangle, client_world_to_screen, client_draw_circle_outline, client_timestamp, client_draw_circle = client.latency, client.set_clan_tag, client.draw_indicator, client.log, client.draw_rectangle, client.world_to_screen, client.draw_circle_outline, client.timestamp, client.draw_circle 
local client_userid_to_entindex, client_trace_line, client_draw_gradient, client_set_event_callback, client_screen_size, client_trace_bullet, client_draw_text = client.userid_to_entindex, client.trace_line, client.draw_gradient, client.set_event_callback, client.screen_size, client.trace_bullet, client.draw_text 
local client_color_log, client_system_time, client_delay_call, client_visible, client_exec, client_eye_position, client_set_cvar = client.color_log, client.system_time, client.delay_call, client.visible, client.exec, client.eye_position, client.set_cvar 
local client_scale_damage, client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int = client.scale_damage, client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int 
local entity_get_player_resource, entity_get_local_player, entity_is_enemy, entity_get_bounding_box, entity_is_dormant, entity_get_steam64, entity_get_player_name, entity_hitbox_position, entity_get_game_rules, entity_get_all = entity.get_player_resource, entity.get_local_player, entity.is_enemy, entity.get_bounding_box, entity.is_dormant, entity.get_steam64, entity.get_player_name, entity.hitbox_position, entity.get_game_rules, entity.get_all 
local entity_set_prop, entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.set_prop, entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_lastoutgoingcommand, globals_curtime, globals_mapname, globals_tickinterval = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.lastoutgoingcommand, globals.curtime, globals.mapname, globals.tickinterval 
local globals_framecount, globals_frametime, globals_maxplayers = globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_is_menu_open, ui_set_visible, ui_new_textbox, ui_new_color_picker, ui_set_callback, ui_set = ui.new_slider, ui.new_combobox, ui.reference, ui.is_menu_open, ui.set_visible, ui.new_textbox, ui.new_color_picker, ui.set_callback, ui.set 
local ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_cos, math_sinh, math_pi, math_max, math_atan2, math_floor, math_sqrt, math_deg, math_atan, math_fmod, math_acos = math.ceil, math.tan, math.cos, math.sinh, math.pi, math.max, math.atan2, math.floor, math.sqrt, math.deg, math.atan, math.fmod, math.acos 
local math_pow, math_abs, math_min, math_sin, math_log, math_exp, math_cosh, math_asin, math_rad = math.pow, math.abs, math.min, math.sin, math.log, math.exp, math.cosh, math.asin, math.rad 
local table_sort, table_remove, table_concat, table_insert = table.sort, table.remove, table.concat, table.insert 
local string_find, string_format, string_gsub, string_len, string_gmatch, string_match, string_reverse, string_upper, string_lower, string_sub = string.find, string.format, string.gsub, string.len, string.gmatch, string.match, string.reverse, string.upper, string.lower, string.sub 
local renderer_circle_outline, renderer_rectangle, renderer_gradient, renderer_circle, renderer_text, renderer_line, renderer_measure_text, renderer_indicator, renderer_world_to_screen = renderer.circle_outline, renderer.rectangle, renderer.gradient, renderer.circle, renderer.text, renderer.line, renderer.measure_text, renderer.indicator, renderer.world_to_screen 
local GetPlayerName = entity.get_player_name
local entity_get_local_player = entity.get_local_player

local function draw_container(x, y, w, h, header)
	local a = 255
	local c = {10, 60, 40, 40, 40, 60, 20}

for i = 0,6,1 do
		renderer_rectangle(x+i, y+i, w-(i*2), h-(i*2), (c[i+1])*0, (c[i+1])*0, (c[i+1])-10, a)
	end
	if header then
		local x_inner, y_inner = x+7, y+7
		local w_inner = w-14

		renderer_gradient(x_inner, y_inner, math_floor(w_inner/2), 1, 59, 175, 222, a, 202, 70, 205, a, true)
		renderer_gradient(x_inner+math_floor(w_inner/2), y_inner, math_ceil(w_inner/2), 1, 202, 70, 205, a, 201, 227, 58, a, true)

		local a_lower = a*0.2
		renderer_gradient(x_inner, y_inner+1, math_floor(w_inner/2), 1, 59, 175, 222, a_lower, 202, 70, 205, a_lower, true)
		renderer_gradient(x_inner+math_floor(w_inner/2), y_inner+1, math_ceil(w_inner/2), 1, 202, 70, 205, a_lower, 201, 227, 58, a_lower, true)
	end
end
local function on_paint(ctx, entity_index)
local spectators = {}
for player=1, globals.maxplayers() do
  if entity.get_classname(player) == "CCSPlayer" then
    local observer_target = entity.get_prop(player, "m_hObserverTarget")
    if observer_target ~= nil then
      if spectators[observer_target] == nil then
        spectators[observer_target] = {}
      end
      table.insert(spectators[observer_target], player)
    end
  end
end

local local_player = entity.get_local_player()
if spectators[local_player] ~= nil then
  --client.log("spectators: ", table.concat(spectators[local_player], " "))
end
local local_player = entity.get_local_player()
if spectators[local_player] ~= nil then
  local my_spectators = {}
  for i=1, #spectators[local_player] do
    table.insert(my_spectators, entity.get_player_name(spectators[local_player][i]))
  end
  if  entity_is_alive(entity_get_local_player())  then
      for i=1, #my_spectators do
draw_container(1700, 500, 200,  i * 13 + 25,true)
end
   client_draw_text(ctx, 1768, 506, 165, 55, 253, 255, "\n", 0,  "Spectators:")
for i=1, #my_spectators do
client_draw_text(ctx, 1800, 510 + (i * 12), 255,255,255,255, "c", 0, my_spectators[i])
end
    end
end
end	
local function on_round_prestart()
	client_exec("cl_fullupdate")
end

client.set_event_callback("round_start", on_round_prestart)
client.set_event_callback("paint", on_paint)