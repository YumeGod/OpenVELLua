--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_log, client_draw_rectangle, client_draw_circle_outline, client_userid_to_entindex, client_draw_indicator, client_draw_gradient, client_set_event_callback, client_screen_size, client_eye_position = client.latency, client.log, client.draw_rectangle, client.draw_circle_outline, client.userid_to_entindex, client.draw_indicator, client.draw_gradient, client.set_event_callback, client.screen_size, client.eye_position 
local client_draw_circle, client_color_log, client_delay_call, client_draw_text, client_visible, client_exec, client_trace_line, client_set_cvar = client.draw_circle, client.color_log, client.delay_call, client.draw_text, client.visible, client.exec, client.trace_line, client.set_cvar 
local client_world_to_screen, client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.world_to_screen, client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_get_player_name, entity_get_steam64, entity_get_bounding_box, entity_get_all, entity_set_prop, entity_get_player_weapon = entity.get_local_player, entity.is_enemy, entity.get_player_name, entity.get_steam64, entity.get_bounding_box, entity.get_all, entity.set_prop, entity.get_player_weapon 
local entity_hitbox_position, entity_get_prop, entity_get_players, entity_get_classname = entity.hitbox_position, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_is_menu_open, ui_new_color_picker, ui_set_callback, ui_set, ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.is_menu_open, ui.new_color_picker, ui.set_callback, ui.set, ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan, math_fmod = math.ceil, math.tan, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan, math.fmod 
local math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_foreach, table_sort, table_remove, table_foreachi, table_move, table_getn, table_concat, table_insert = table.maxn, table.foreach, table.sort, table.remove, table.foreachi, table.move, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
--end of local variables 

local show_angles_reference = ui.new_multiselect("VISUALS", "Other ESP", "Show Anti-aimbot angles", "Real", "Fake", "LBY", "Camera")

local show_camera_reference = ui.new_multiselect("VISUALS", "Other ESP", "Camera Perspectives", "Firstperson", "Thirdperson")

local real_length_reference = ui.new_slider("VISUALS", "Other ESP", "Real Distance / Color", 10, 80, 30, true, "u")
local real_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Real Color", 0, 173, 55, 255)

local fake_length_reference = ui.new_slider("VISUALS", "Other ESP", "Fake Distance / Color", 10, 80, 30, true, "u")
local fake_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Fake Color", 236, 162, 4, 255)

local lby_length_reference = ui.new_slider("VISUALS", "Other ESP", "LBY Distance / Color", 10, 80, 30, true, "u")
local lby_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "LBY Color", 251, 0, 0, 255)

local camera_length_reference = ui.new_slider("VISUALS", "Other ESP", "Camera Distance / Color", 10, 80, 30, true, "u")
local camera_color_reference = ui.new_color_picker("VISUALS", "Other ESP", "Camera Color", 255, 255, 255, 255)

local boxSize = 30
local length = 40
local screen_width, screen_height = client.screen_size()

ui_set_visible(real_length_reference, false)
ui_set_visible(real_color_reference, false)

ui_set_visible(fake_length_reference, false)
ui_set_visible(fake_color_reference, false)

ui_set_visible(lby_length_reference, false)
ui_set_visible(lby_color_reference, false)

ui_set_visible(camera_length_reference, false)
ui_set_visible(camera_color_reference, false)

local function is_thirdperson(ctx)
	local x, y, z = client_eye_position()
	local pitch, yaw = client_camera_angles()
	
	yaw = yaw - 180
	pitch, yaw = math_rad(pitch), math_rad(yaw)

	x = x + math_cos(yaw)*4
	y = y + math_sin(yaw)*4
	z = z + math_sin(pitch)*4

	local wx, wy = client_world_to_screen(ctx, x, y, z)
	return wx ~= nil
end

local function contains(table, val)
	for i=1,#table do
		if table[i] == val then 
			return true
		end
	end
	return false
end

local function on_show_angles_change()
	local value = ui_get(show_angles_reference)
	
	ui_set_visible(real_length_reference, contains(value, "Real"))
	ui_set_visible(real_color_reference, contains(value, "Real"))

	ui_set_visible(fake_length_reference, contains(value, "Fake"))
	ui_set_visible(fake_color_reference, contains(value, "Fake"))

	ui_set_visible(lby_length_reference, contains(value, "LBY"))
	ui_set_visible(lby_color_reference, contains(value, "LBY"))

	ui_set_visible(camera_length_reference, contains(value, "Camera"))
	ui_set_visible(camera_color_reference, contains(value, "Camera"))
end

ui_set_callback(show_angles_reference, on_show_angles_change)

local function on_paint(ctx)
	local local_player = entity_get_local_player()

	if local_player == nil then
		return
	end

	if entity_get_prop(local_player, "m_lifeState") ~= 0 then
		return
	end

	local value = ui_get(show_angles_reference)
	local camera_value = ui_get(show_camera_reference)

	if #value == 0 then
		return
	end



	local locationX, locationY, locationZ = client_eye_position()
	locationZ = locationZ - entity_get_prop(local_player, "m_vecViewOffset[2]") - 1
	
	if not is_thirdperson(ctx) then
		if contains(camera_value, "Firstperson") then
			if contains(value, "Real") then
				local real_r, real_g, real_b, real_a = ui_get(real_color_reference)
				local real_distance = ui_get(real_length_reference)
				
				local headX, headY, headZ = entity_hitbox_position(local_player, 0)
				local deltaX, deltaY = headX-locationX, headY-locationY
				local realYaw = math_deg(math_atan2(deltaY, deltaX))
				local _, cameraYaw = client_camera_angles()
				
				-- Arrow Main
				locationXReal = screen_width / 2 + math_cos(math_rad(cameraYaw - realYaw - 95)) * (real_distance * 2)
				locationYReal = screen_height / 2 + math_sin(math_rad(cameraYaw - realYaw - 95)) * (real_distance * 2)		
				-- Arrow Main
				locationXReal1 = screen_width / 2 + math_cos(math_rad(cameraYaw - realYaw - 85)) * (real_distance * 2)
				locationYReal1 = screen_height / 2 + math_sin(math_rad(cameraYaw - realYaw - 85)) * (real_distance * 2)
				-- Arrow Middle
				locationXReal2 = screen_width / 2 + math_cos(math_rad(cameraYaw - realYaw - 90)) * ((real_distance + real_distance / 5) * 2)
				locationYReal2 = screen_height / 2 + math_sin(math_rad(cameraYaw - realYaw - 90)) * ((real_distance + real_distance / 5) * 2)
				-- Arrow Outside
				locationXReal3 = screen_width / 2 + math_cos(math_rad(cameraYaw - realYaw - 75)) * ((real_distance - 1) * 2)
				locationYReal3 = screen_height / 2 + math_sin(math_rad(cameraYaw - realYaw - 75)) * ((real_distance - 1) * 2)
				-- Arrow Outside
				locationXReal4 = screen_width / 2 + math_cos(math_rad(cameraYaw - realYaw - 105)) * ((real_distance - 1) * 2)
				locationYReal4 = screen_height / 2 + math_sin(math_rad(cameraYaw - realYaw - 105)) * ((real_distance - 1) * 2)
				
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXReal, locationYReal, real_r, real_g, real_b, real_a)
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXReal1, locationYReal1, real_r, real_g, real_b, real_a)
				client_draw_line(ctx, locationXReal2, locationYReal2, locationXReal3, locationYReal3, real_r, real_g, real_b, real_a)
				client_draw_line(ctx, locationXReal2, locationYReal2, locationXReal4, locationYReal4, real_r, real_g, real_b, real_a)
				client_draw_line(ctx, locationXReal1, locationYReal1, locationXReal3, locationYReal3, real_r, real_g, real_b, real_a)
				client_draw_line(ctx, locationXReal, locationYReal, locationXReal4, locationYReal4, real_r, real_g, real_b, real_a)
			end
		
			if contains(value, "Fake") then
				local fake_r, fake_g, fake_b, fake_a = ui_get(fake_color_reference)
				local fake_distance = ui_get(fake_length_reference)
				local _, fakeYaw, _ = entity_get_prop(entity_get_local_player(), "m_angEyeAngles")
				local _, cameraYaw = client_camera_angles()
				
				-- Arrow Main
				locationXFake = screen_width / 2 + math_cos(math_rad(cameraYaw - fakeYaw - 95)) * (fake_distance * 2)
				locationYFake = screen_height / 2 + math_sin(math_rad(cameraYaw - fakeYaw - 95)) * (fake_distance * 2)		
				-- Arrow Main
				locationXFake1 = screen_width / 2 + math_cos(math_rad(cameraYaw - fakeYaw - 85)) * (fake_distance * 2)
				locationYFake1 = screen_height / 2 + math_sin(math_rad(cameraYaw - fakeYaw - 85)) * (fake_distance * 2)
				-- Arrow Middle
				locationXFake2 = screen_width / 2 + math_cos(math_rad(cameraYaw - fakeYaw - 90)) * ((fake_distance + fake_distance / 5) * 2)
				locationYFake2 = screen_height / 2 + math_sin(math_rad(cameraYaw - fakeYaw - 90)) * ((fake_distance + fake_distance / 5) * 2)
				-- Arrow Outside
				locationXFake3 = screen_width / 2 + math_cos(math_rad(cameraYaw - fakeYaw - 75)) * ((fake_distance - 1) * 2)
				locationYFake3 = screen_height / 2 + math_sin(math_rad(cameraYaw - fakeYaw - 75)) * ((fake_distance - 1) * 2)
				-- Arrow Outside
				locationXFake4 = screen_width / 2 + math_cos(math_rad(cameraYaw - fakeYaw - 105)) * ((fake_distance - 1) * 2)
				locationYFake4 = screen_height / 2 + math_sin(math_rad(cameraYaw - fakeYaw - 105)) * ((fake_distance - 1) * 2)
				
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXFake, locationYFake, fake_r, fake_g, fake_b, fake_a)
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXFake1, locationYFake1, fake_r, fake_g, fake_b, fake_a)
				client_draw_line(ctx, locationXFake2, locationYFake2, locationXFake3, locationYFake3, fake_r, fake_g, fake_b, fake_a)
				client_draw_line(ctx, locationXFake2, locationYFake2, locationXFake4, locationYFake4, fake_r, fake_g, fake_b, fake_a)
				client_draw_line(ctx, locationXFake1, locationYFake1, locationXFake3, locationYFake3, fake_r, fake_g, fake_b, fake_a)
				client_draw_line(ctx, locationXFake, locationYFake, locationXFake4, locationYFake4, fake_r, fake_g, fake_b, fake_a)
			end
			
			if contains(value, "LBY") then
				local lby_r, lby_g, lby_b, lby_a = ui_get(lby_color_reference)
				local lby_distance = ui_get(lby_length_reference)
				local lbyYaw = entity_get_prop(entity_get_local_player(), "m_flLowerBodyYawTarget")
				local _, cameraYaw = client_camera_angles()

				-- Arrow Main
				locationXLBY = screen_width / 2 + math_cos(math_rad(cameraYaw - lbyYaw - 95)) * (lby_distance * 2)
				locationYLBY = screen_height / 2 + math_sin(math_rad(cameraYaw - lbyYaw - 95)) * (lby_distance * 2)		
				-- Arrow Main
				locationXLBY1 = screen_width / 2 + math_cos(math_rad(cameraYaw - lbyYaw - 85)) * (lby_distance * 2)
				locationYLBY1 = screen_height / 2 + math_sin(math_rad(cameraYaw - lbyYaw - 85)) * (lby_distance * 2)
				-- Arrow Middle
				locationXLBY2 = screen_width / 2 + math_cos(math_rad(cameraYaw - lbyYaw - 90)) * ((lby_distance + lby_distance / 5) * 2)
				locationYLBY2 = screen_height / 2 + math_sin(math_rad(cameraYaw - lbyYaw - 90)) * ((lby_distance + lby_distance / 5) * 2)
				-- Arrow Outside
				locationXLBY3 = screen_width / 2 + math_cos(math_rad(cameraYaw - lbyYaw - 75)) * ((lby_distance - 1) * 2)
				locationYLBY3 = screen_height / 2 + math_sin(math_rad(cameraYaw - lbyYaw - 75)) * ((lby_distance - 1) * 2)
				-- Arrow Outside
				locationXLBY4 = screen_width / 2 + math_cos(math_rad(cameraYaw - lbyYaw - 105)) * ((lby_distance - 1) * 2)
				locationYLBY4 = screen_height / 2 + math_sin(math_rad(cameraYaw - lbyYaw - 105)) * ((lby_distance - 1) * 2)
				
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXLBY, locationYLBY, lby_r, lby_g, lby_b, lby_a)
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXLBY1, locationYLBY1, lby_r, lby_g, lby_b, lby_a)
				client_draw_line(ctx, locationXLBY2, locationYLBY2, locationXLBY3, locationYLBY3, lby_r, lby_g, lby_b, lby_a)
				client_draw_line(ctx, locationXLBY2, locationYLBY2, locationXLBY4, locationYLBY4, lby_r, lby_g, lby_b, lby_a)
				client_draw_line(ctx, locationXLBY1, locationYLBY1, locationXLBY3, locationYLBY3, lby_r, lby_g, lby_b, lby_a)
				client_draw_line(ctx, locationXLBY, locationYLBY, locationXLBY4, locationYLBY4, lby_r, lby_g, lby_b, lby_a)
			end
			
			if contains(value, "Camera") then
				local camera_r, camera_g, camera_b, camera_a = ui_get(camera_color_reference)
				local camera_distance = ui_get(camera_length_reference)
				local _, cameraYaw = client_camera_angles()
				
				-- Arrow Main
				locationXCamera = screen_width / 2 + math_cos(math_rad(- 95)) * (camera_distance * 2)
				locationYCamera = screen_height / 2 + math_sin(math_rad(- 95)) * (camera_distance * 2)		
				-- Arrow Main
				locationXCamera1 = screen_width / 2 + math_cos(math_rad(- 85)) * (camera_distance * 2)
				locationYCamera1 = screen_height / 2 + math_sin(math_rad(- 85)) * (camera_distance * 2)
				-- Arrow Middle
				locationXCamera2 = screen_width / 2 + math_cos(math_rad(- 90)) * ((camera_distance + camera_distance / 5) * 2)
				locationYCamera2 = screen_height / 2 + math_sin(math_rad(- 90)) * ((camera_distance + camera_distance / 5) * 2)
				-- Arrow Outside
				locationXCamera3 = screen_width / 2 + math_cos(math_rad(- 75)) * ((camera_distance - 1) * 2)
				locationYCamera3 = screen_height / 2 + math_sin(math_rad(- 75)) * ((camera_distance - 1) * 2)
				-- Arrow Outside
				locationXCamera4 = screen_width / 2 + math_cos(math_rad(- 105)) * ((camera_distance - 1) * 2)
				locationYCamera4 = screen_height / 2 + math_sin(math_rad(- 105)) * ((camera_distance - 1) * 2)
				
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXCamera, locationYCamera, camera_r, camera_g, camera_b, camera_a)
				client_draw_line(ctx, screen_width / 2, screen_height / 2, locationXCamera1, locationYCamera1, camera_r, camera_g, camera_b, camera_a)
				client_draw_line(ctx, locationXCamera2, locationYCamera2, locationXCamera3, locationYCamera3, camera_r, camera_g, camera_b, camera_a)
				client_draw_line(ctx, locationXCamera2, locationYCamera2, locationXCamera4, locationYCamera4, camera_r, camera_g, camera_b, camera_a)
				client_draw_line(ctx, locationXCamera1, locationYCamera1, locationXCamera3, locationYCamera3, camera_r, camera_g, camera_b, camera_a)
				client_draw_line(ctx, locationXCamera, locationYCamera, locationXCamera4, locationYCamera4, camera_r, camera_g, camera_b, camera_a)
			end
		end
		return
	end
	
	if locationX then

		local worldX, worldY = client_world_to_screen(ctx, locationX, locationY, locationZ)

		if worldX == nil or worldY == nil then return end

		local lbyYaw = entity_get_prop(entity_get_local_player(), "m_flLowerBodyYawTarget")
		if contains(camera_value, "Thirdperson") then
			if contains(value, "Real") then
				local real_r, real_g, real_b, real_a = ui_get(real_color_reference)
				local real_distance = ui_get(real_length_reference)

				local headX, headY, headZ = entity_hitbox_position(local_player, 0)
				local deltaX, deltaY = headX-locationX, headY-locationY
				local realYaw = math_deg(math_atan2(deltaY, deltaX))

				locationXReal = locationX + math_cos(math_rad(realYaw)) * real_distance
				locationYReal = locationY + math_sin(math_rad(realYaw)) * real_distance

				local worldXReal, worldYReal = client_world_to_screen(ctx, locationXReal, locationYReal, locationZ)

				if worldXReal ~= nil then
					client_draw_line(ctx, worldX, worldY, worldXReal, worldYReal, real_r, real_g, real_b, real_a)
					client_draw_text(ctx, worldXReal, worldYReal, real_r, real_g, real_b, real_a, "c-", 0, "REAL")
				end
			end

			if contains(value, "Fake") then
				local fake_r, fake_g, fake_b, fake_a = ui_get(fake_color_reference)
				local fake_distance = ui_get(fake_length_reference)
				local _, fakeYaw, _ = entity_get_prop(entity_get_local_player(), "m_angEyeAngles")
				locationXFake = locationX + math_cos(math_rad(fakeYaw)) * fake_distance
				locationYFake = locationY + math_sin(math_rad(fakeYaw)) * fake_distance

				local worldXFake, worldYFake = client_world_to_screen(ctx, locationXFake, locationYFake, locationZ)

				if worldXFake ~= nil then
					client_draw_line(ctx, worldX, worldY, worldXFake, worldYFake, fake_r, fake_g, fake_b, fake_a)
					client_draw_text(ctx, worldXFake, worldYFake, fake_r, fake_g, fake_b, fake_a, "c-", 0, "FAKE")
				end
			end

			if contains(value, "LBY") then
				local lby_r, lby_g, lby_b, lby_a = ui_get(lby_color_reference)
				local lby_distance = ui_get(lby_length_reference)
				locationXLBY = locationX + math_cos(math_rad(lbyYaw)) * lby_distance
				locationYLBY = locationY + math_sin(math_rad(lbyYaw)) * lby_distance

				local worldXLBY, worldYLBY = client_world_to_screen(ctx, locationXLBY, locationYLBY, locationZ)

				if worldXLBY ~= nil then
					client_draw_line(ctx, worldX, worldY, worldXLBY, worldYLBY, lby_r, lby_g, lby_b, lby_a)
					client_draw_text(ctx, worldXLBY, worldYLBY, lby_r, lby_g, lby_b, lby_a, "c-", 0, "LBY")
				end
			end

			if contains(value, "Camera") then
				local camera_r, camera_g, camera_b, camera_a = ui_get(camera_color_reference)
				local camera_distance = ui_get(camera_length_reference)
				local _, cameraYaw = client_camera_angles()
				locationXCamera = locationX + math_cos(math_rad(cameraYaw)) * camera_distance
				locationYCamera = locationY + math_sin(math_rad(cameraYaw)) * camera_distance

				local worldXCamera, worldYCamera = client_world_to_screen(ctx, locationXCamera, locationYCamera, locationZ)

				if worldXCamera ~= nil then
					client_draw_line(ctx, worldX, worldY, worldXCamera, worldYCamera, camera_r, camera_g, camera_b, camera_a)
					client_draw_text(ctx, worldXCamera, worldYCamera, camera_r, camera_g, camera_b, camera_a, "c-", 0, "CAM")
				end
			end
		end
		if #value > 0 then
			client_draw_circle(ctx, worldX, worldY, 17, 17, 17, 255, 2, 0, 1)
		end
	end
end

client.set_event_callback("paint", on_paint)