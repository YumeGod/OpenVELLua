local function a(b,c,d,...)if not b then error(string.format(d,...),c)end end;local e={rage={"aimbot","other"},aa={"anti-aimbot angles","fake lag","other"},legit={"weapon type","aimbot","triggerbot","other"},visuals={"player esp","other esp","colored models","effects"},misc={"miscellaneous","settings","lua","other"},skins={"weapon skin","knife options","glove options"},config={"presets","lua"},players={"players","adjustments"},lua={"a","b"}}for f,g in pairs(e)do e[f]={}for h=1,#g do e[f][g[h]]=true end end;local i={}local j={__index=i}function j.__call(k,...)local l={...}if#l==0 then return k:get()end;local m={pcall(k.set,k,unpack(l))}a(m[1],4,m[2])return k end;function i.new(n,f,o,p,...)local q;local r=false;if type(n)=="function"then local s={pcall(n,f,o,p,...)}a(s[1],4,"Cannot create menu item because: %s",s[2])q=s[2]else q=n;r=true end;return setmetatable({tab=f,container=o,name=p,reference=q,visible=true,hidden_value=nil,children={},ui_callback=nil,callbacks={},is_menu_reference=r,getter={callback=nil,data=nil},setter={callback=nil,data=nil},parent_value_or_callback=nil},j)end;function i:set_hidden_value(t)self.hidden_value=t end;function i:set(...)local l={...}if self.setter.callback~=nil then l=self.setter.callback(unpack(l))end;local m={pcall(ui.set,self.reference,unpack(l))}a(m[1],3,"Cannot set values of menu item because: %s",m[2])end;function i:get()if self.visible==false and self.hidden_value~=nil then return self.hidden_value end;local u={ui.get(self.reference)}if self.getter.callback~=nil then return self.getter.callback(u)end;return unpack(u)end;function i:set_setter_callback(v,w)a(type(v)=="function",3,"Cannot set menu item setter callback: argument must be a function.")self.setter.callback=v;self.setter.data=w end;function i:set_getter_callback(v,w)a(type(v)=="function",3,"Cannot set menu item getter callback: argument must be a function.")self.getter.callback=v;self.getter.data=w end;function i:add_children(x,y)if y==nil then y=true end;if getmetatable(x)==j then x={x}end;for z,A in pairs(x)do a(getmetatable(A)==j,3,"Cannot add child to menu item: children must be menu item objects. Make sure you are not trying to parent a UI reference.")a(A.reference~=self.reference,3,"Cannot parent a menu item to iself.")A.parent_value_or_callback=y;self.children[A.reference]=A end;i._process_callbacks(self)end;function i:add_callback(v)a(self.is_menu_reference==false,3,"Cannot add callbacks to built-in menu items.")a(type(v)=="function",3,"Callbacks for menu items must be functions.")table.insert(self.callbacks,v)i._process_callbacks(self)end;function i._process_callbacks(k)local v=function()for z,A in pairs(k.children)do local B;if type(A.parent_value_or_callback)=="function"then B=A.parent_value_or_callback()else B=k:get()==A.parent_value_or_callback end;local C=B==true and k.visible==true;A.visible=C;ui.set_visible(A.reference,C)if A.ui_callback~=nil then A.ui_callback()end end;for h=1,#k.callbacks do k.callbacks[h]()end end;ui.set_callback(k.reference,v)k.ui_callback=v;v()end;local D={}local E={__index=D}function D.new(f,o)D._validate_tab_container(f,o)return setmetatable({tab=f,container=o,children={}},E)end;function D:save_to_db()local F=string.format("%s_%s",self.tab,self.container)for z,k in pairs(self.children)do local G=string.format("%s_%s",F,k.name)local w={k()}database.write(G,w)end end;function D:load_from_db()local F=string.format("%s_%s",self.tab,self.container)for z,k in pairs(self.children)do local G=string.format("%s_%s",F,k.name)local w=database.read(G)if w~=nil then local H,z=pcall(k.set,k,unpack(w))if H==false and k.slider_default_value~=nil then k(k.slider_default_value)end end end end;function D:parent_all_to(k,y)local x=self.children;x[k.reference]=nil;k:add_children(x,y)end;function D.reference(f,o,p)D._validate_tab_container(f,o)local I={pcall(ui.reference,f,o,p)}a(I[1],3,"Cannot reference Gamesense menu item because: %s",I[2])local J={select(2,unpack(I))}local K={}for h=1,#J do table.insert(K,i.new(J[h],f,o,p))end;return unpack(K)end;function D:checkbox(p)return self:_create_item(ui.new_checkbox,p)end;function D:slider(p,L,M,N,O,P,Q,R)if type(N)=="table"then local S=N;N=S.default;O=S.show_tooltip;P=S.unit;Q=S.scale;R=S.tooltips end;N=N or nil;O=O or true;P=P or nil;Q=Q or 1;R=R or nil;a(type(L)=="number",3,"Slider min value must be a number.")a(type(M)=="number",3,"Slider max value must be a number.")a(L<M,3,"Slider min value must be below the max value.")if N~=nil then a(N>=L and N<=M,3,"Slider default must be between min and max values.")end;local k=self:_create_item(ui.new_slider,p,L,M,N,O,P,Q,R)k.slider_default_value=N;return k end;function D:combobox(p,...)local l={...}if type(l[1])=="table"then l=l[1]end;return self:_create_item(ui.new_combobox,p,l)end;function D:multiselect(p,...)local l={...}if type(l[1])=="table"then l=l[1]end;return self:_create_item(ui.new_multiselect,p,l)end;function D:hotkey(p,T)if T==nil then T=false end;a(type(T)=="boolean",3,"Hotkey inline argument must be a boolean.")return self:_create_item(ui.new_hotkey,p,T)end;function D:button(p,v)a(type(v)=="function",3,"Cannot set button callback because the callback argument must be a function.")return self:_create_item(ui.new_button,p,v)end;function D:color_picker(p,U,V,W,X)U=U or 255;V=V or 255;W=W or 255;X=X or 255;a(type(U)=="number"and U>=0 and U<=255,3,"Cannot set color picker red channel value. It must be between 0 and 255.")a(type(V)=="number"and V>=0 and V<=255,3,"Cannot set color picker green channel value. It must be between 0 and 255.")a(type(W)=="number"and W>=0 and W<=255,3,"Cannot set color picker blue channel value. It must be between 0 and 255.")a(type(X)=="number"and X>=0 and X<=255,3,"Cannot set color picker alpha channel value. It must be between 0 and 255.")return self:_create_item(ui.new_color_picker,p,U,V,W,X)end;function D:textbox(p)return self:_create_item(ui.new_textbox,p)end;function D:listbox(p,...)local l={...}if type(l[1])=="table"then l=l[1]end;local k=self:_create_item(ui.new_listbox,p,l)k:set_getter_callback(function(u)return k.getter.data[u+1]end,l)return k end;function D:label(p)a(type(p)=="string","Label name must be a string.")return self:_create_item(ui.new_label,p)end;function D:_create_item(n,p,...)a(type(p)=="string"and p~="",3,"Cannot create menu item: name must be a non-empty string.")local k=i.new(n,self.tab,self.container,p,...)self.children[k.reference]=k;return k end;function D._validate_tab_container(f,o)a(type(f)=="string"and f~="",4,"Cannot create menu manager: tab name must be a non-empty string.")a(type(o)=="string"and o~="",4,"Cannot create menu manager: tab name must be a non-empty string.")f=f:lower()a(e[f]~=nil,4,"Cannot create menu manager: tab name does not exist.")a(e[f][o:lower()]~=nil,4,"Cannot create menu manager: container name does not exist.")end;local Y=package.vel_hook("trails")local Z=Y.vector()local _=D.new("config","presets")_:label("--------------------------------------------------")_:label("Player Trails - v1.0.1-beta")local a0=_:checkbox("Enable Player Trails")local a1=Y.shader.rgb(255,255,255,5)local a2=_:color_picker("Trail color",255,255,255,5)a2:add_callback(function()local U,V,W,X=a2()a1(U,V,W,X)end)client.delay_call(0.015625,function()local U,V,W,X=a2()a1(U,V,W,X)end)local a3=_:checkbox("Trail rainbow mode")local a4=0;local a5=_:slider("Trail rainbow speed",1,10,{unit="x"})a5:add_callback(function()a4=a5()*0.05 end)local a6=_:slider("Trail radius",1,30,{default=20,unit="x"})local a7=0;local a8=_:slider("Trail decay speed",1,50,{default=5,scale=0.1,unit="x"})a8:add_callback(function()a7=a8()*0.1 end)a0:add_children({a2,a3,a6,a8})a3:add_children({a5})_:load_from_db()client.set_event_callback("paint",function()if a0()==false or Y:available()==false then return end;if a3()==true then a1:shift_hue(a4*Y.simulation.delta)end;if Y.shared.is_dead==true or Y.shared.player_speed<30 then return end;if Z:distance(Y.shared.player_origin)<0.5 then return end;Z=Y.shared.player_origin:clone()local a9=Y:create()a9.origin=Y.shared.player_origin:clone()a9.shader=a1:clone()a9.type="circle"a9.radius=a6()a9.on_frame=function()a9:kill_invisible()a9.shader:fade_out(a7*Y.simulation.delta)end end)client.set_event_callback("player_spawn",function(w)if entity.get_local_player()~=client.userid_to_entindex(w.userid)then return end;if Y:available()==true and a0()==true then local U,V,W,X=a2()a1(U,V,W,X)end end)client.set_event_callback("shutdown",function()_:save_to_db()end)
